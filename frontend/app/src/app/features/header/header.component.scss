@import "~@angular/material/theming";

@mixin header-theme($theme) {
  $primary: map-get($theme, primary);
  $secundary: map-get($theme, foreground);
  $accent: map-get($theme, accent);
  $background: map-get($theme, background);
  $background-color: mat-color($background, card);

  .header {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100vw;
    height: 100vh;

    // set the width size of the sidenav
    mat-sidenav {
      width: 350px;
    }

    .is-mobile .toolbar {
      position: fixed;
      /* Make sure the toolbar will stay on top of the content as it scrolls past. */
      z-index: 2;
    }

    h1.app-name {
      margin-left: 8px;
    }

    .sidenav-container {
      /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
     causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
      flex: 1;
    }

    .is-mobile .sidenav-container {
      /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
     `<body>` to be our scrolling element for mobile layouts. */
      flex: 1 0 auto;
    }

    .navbar {
      margin-bottom: 20px;
    }

    .flex-container {
      display: flex;
      flex-direction: column;
    }

    .fill-remaining-space {
      /* This fills the remaining space, by using flexbox.
     Every toolbar row uses a flexbox row layout. */
      flex: 1 1 auto;
    }

    button {
      outline: none;
      border: none;
    }

    .mat-list .mat-list-item .mat-list-icon,
    .mat-list .mat-list-option .mat-list-icon,
    .mat-nav-list .mat-list-item .mat-list-icon,
    .mat-nav-list .mat-list-option .mat-list-icon,
    .mat-selection-list .mat-list-item .mat-list-icon,
    .mat-selection-list .mat-list-option .mat-list-icon {
      padding: 0 0 16px 0 !important;
    }

    .mat-list .mat-list-item .mat-list-text,
    .mat-list .mat-list-option .mat-list-text,
    .mat-nav-list .mat-list-item .mat-list-text,
    .mat-nav-list .mat-list-option .mat-list-text,
    .mat-selection-list .mat-list-item .mat-list-text,
    .mat-selection-list .mat-list-option .mat-list-text {
      padding-right: 0 !important;
    }

    .mat-expansion-panel-header-title,
    .mat-expansion-panel-header-description {
      flex-basis: 0;
    }

    .mat-expansion-panel-header-description {
      justify-content: space-between;
      align-items: center;
    }

    .bottomStick {
      /*border-top:1px solid green;border-bottom:1px solid green;*/
      position: absolute;
      bottom: 0;
    }

    .bottomRelative {
      position: relative;
    }

    #visibilityContainer {
      ::-webkit-scrollbar {
        height: 4px;
        width: 4px;
      }

      ::-webkit-scrollbar-track {
        background-color: mat-color($primary) !important;
        background: transparent;
      }

      ::-webkit-scrollbar-thumb {
        background: mat-color($accent);
      }
    }

    /*
    * Actual Sticky Footer Styles
    */

    .all-wrap {
      min-height: 100vh;
      /*same height as browser window height */
    }

    .page-wrap {
      display: flex;
      flex-direction: column;
      // uses flexbox to enforce the app toolbar is always present, even as the user scrolls down through content
      .main-toolbar {
        flex: 0 0 auto;
        z-index: 999;
      }
      // uses flexbox to push the inner content area, where the router-outlet lives below the toolbar and grants
      // it the rest of the available space with the ability to scroll
      .main-content-inner {
        flex: 1 1 auto;
        position: relative; /* need this to position inner content */
        overflow-y: auto;

        .content-area {
          padding: 15px 30px;
        }
      }
    }

    .content {
      flex: 1;
      /* child will set to an equal size inside the container */
    }

    /*
    * Make the component injected by <router-outlet> full height:
    */

    main {
      display: flex;
      flex-direction: column;

      /* Select all direct descendants only of the <main> element
         that are not <router-outlet> elements: */
      > *:not(router-outlet) {
        flex: 1;
        /* child will set to an equal size inside the container */
        display: block;
      }
    }
  }
}
